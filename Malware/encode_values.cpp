#include <string>
#include <iostream>
#include <iomanip>
#include <vector>

// This is the exact same algorithm used in deobfuscate()
std::vector<unsigned char> obfuscate_string(const std::string& str) {
    std::vector<unsigned char> result;
    char key = 0x42; // Initial key for XOR encoding
    
    for (char c : str) {
        result.push_back(c ^ key);
        key = (key >> 1) | ((key & 1) << 7); // Rotate key
    }
    result.push_back(0x00); // Add null terminator
    return result;
}

// Helper to print obfuscated bytes
void print_obfuscated(const std::string& name, const std::vector<unsigned char>& bytes, const std::string& original) {
    std::cout << "const unsigned char " << name << "[] = {";
    for (size_t i = 0; i < bytes.size(); ++i) {
        std::cout << "0x" << std::hex << std::setw(2) << std::setfill('0') 
                  << static_cast<int>(bytes[i]);
        if (i < bytes.size() - 1) {
            std::cout << ", ";
        }
    }
    std::cout << "}; // " << original << std::endl;
}

// Decoding function to verify our encoding
std::string deobfuscate_test(const std::vector<unsigned char>& obfuscated) {
    std::string result;
    char key = 0x42; // Initial key for XOR decoding
    
    for (size_t i = 0; i < obfuscated.size() - 1; i++) { // Skip null terminator
        result += (obfuscated[i] ^ key);
        key = (key >> 1) | ((key & 1) << 7); // Rotate key
    }
    
    return result;
}

int main() {
    std::string c2_server = "127.0.0.1"; //  C2 server
    std::string secret = "changeme";
    std::string useragent = "Mozilla/5.0";
    
    // Obfuscate the strings
    auto obf_c2_server = obfuscate_string(c2_server);
    auto obf_secret = obfuscate_string(secret);
    auto obf_useragent = obfuscate_string(useragent);
    
    // Print the obfuscated values
    print_obfuscated("obf_c2_server", obf_c2_server, c2_server);
    print_obfuscated("obf_secret", obf_secret, secret);
    print_obfuscated("obf_useragent", obf_useragent, useragent);
    
    // Verify decoding works
    std::cout << "\nVerification:" << std::endl;
    std::cout << "-------------------" << std::endl;
    std::cout << "Decoded C2: " << deobfuscate_test(obf_c2_server) << std::endl;
    std::cout << "Decoded Secret: " << deobfuscate_test(obf_secret) << std::endl;
    std::cout << "Decoded UserAgent: " << deobfuscate_test(obf_useragent) << std::endl;
    
    return 0;
}