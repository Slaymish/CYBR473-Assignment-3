#include <iostream>
#include <cassert>
#include <string>

using namespace std;

// Copy functions from main.cpp for testing
string xor_encode(const string& data, char key) {
    string result;
    for (char c : data) {
        result += (c ^ key);
    }
    return result;
}

string rotate_right(const string& data, int amount) {
    if (data.empty()) return data;
    amount %= data.size();
    return data.substr(data.size() - amount) + data.substr(0, data.size() - amount);
}

int main() {
    cout << "Running crypto tests..." << endl;
    
    // Test XOR encoding - basic functionality
    {
        string test = "hello";
        string encoded = xor_encode(test, 'A');
        string decoded = xor_encode(encoded, 'A');
        assert(decoded == test);
        cout << "✓ XOR basic encode/decode test passed" << endl;
    }
    
    // Test XOR encoding - empty string
    {
        string test = "";
        string encoded = xor_encode(test, 'Z');
        assert(encoded == "");
        cout << "✓ XOR empty string test passed" << endl;
    }
    
    // Test XOR encoding - different keys
    {
        string test = "test123";
        string encoded1 = xor_encode(test, 0x42);
        string encoded2 = xor_encode(test, 0x99);
        assert(encoded1 != encoded2);
        assert(xor_encode(encoded1, 0x42) == test);
        assert(xor_encode(encoded2, 0x99) == test);
        cout << "✓ XOR different keys test passed" << endl;
    }
    
    // Test rotation - basic
    {
        string test = "abcde";
        string rotated = rotate_right(test, 2);
        assert(rotated == "deabc");
        cout << "✓ Rotation basic test passed" << endl;
    }
    
    // Test rotation - edge cases
    {
        string test = "abc";
        assert(rotate_right(test, 0) == "abc");
        assert(rotate_right(test, 3) == "abc"); // Full rotation
        assert(rotate_right(test, 6) == "abc"); // Multiple full rotations
        assert(rotate_right("", 5) == "");      // Empty string
        cout << "✓ Rotation edge cases test passed" << endl;
    }
    
    // Test rotation - various amounts
    {
        string test = "12345";
        assert(rotate_right(test, 1) == "51234");
        assert(rotate_right(test, 2) == "45123");
        assert(rotate_right(test, 4) == "23451");
        cout << "✓ Rotation various amounts test passed" << endl;
    }
    
    cout << "All crypto tests passed!" << endl;
    return 0;
}
