#include <iostream>
#include <cassert>
#include <string>
#include <sstream>

using namespace std;

// Mock functions for testing (avoid actual Windows calls)
bool mock_sleep_called = false;
int mock_sleep_duration = 0;
bool mock_exit_called = false;
bool mock_messagebox_called = false;
string mock_messagebox_text = "";

void mock_sleep(int duration) {
    mock_sleep_called = true;
    mock_sleep_duration = duration;
}

void mock_exit() {
    mock_exit_called = true;
}

void mock_messagebox(const string& message) {
    mock_messagebox_called = true;
    mock_messagebox_text = message;
}

// Modified execute_command for testing
void execute_command_test(const string& command) {
    // Reset mocks
    mock_sleep_called = false;
    mock_exit_called = false;
    mock_messagebox_called = false;
    mock_messagebox_text = "";
    
    if (command.find("slp ") == 0) {
        try {
            int n = stoi(command.substr(4));
            mock_sleep(n);
        } catch (...) {
            // Invalid sleep time, ignore
        }
    } else if (command == "shd") {
        mock_exit();
    } else if (command.find("pwn ") == 0) {
        string message = command.substr(4);
        mock_messagebox(message);
    }
}

int main() {
    cout << "Running command tests..." << endl;
    
    // Test sleep command
    {
        execute_command_test("slp 5");
        assert(mock_sleep_called);
        assert(mock_sleep_duration == 5);
        cout << "✓ Sleep command test passed" << endl;
    }
    
    // Test sleep command with different values
    {
        execute_command_test("slp 30");
        assert(mock_sleep_called);
        assert(mock_sleep_duration == 30);
        cout << "✓ Sleep command (30s) test passed" << endl;
    }
    
    // Test invalid sleep command
    {
        execute_command_test("slp invalid");
        assert(!mock_sleep_called);
        cout << "✓ Invalid sleep command test passed" << endl;
    }
    
    // Test shutdown command
    {
        execute_command_test("shd");
        assert(mock_exit_called);
        cout << "✓ Shutdown command test passed" << endl;
    }
    
    // Test pwn command
    {
        execute_command_test("pwn Hello World!");
        assert(mock_messagebox_called);
        assert(mock_messagebox_text == "Hello World!");
        cout << "✓ PWN command test passed" << endl;
    }
    
    // Test pwn command with special characters
    {
        execute_command_test("pwn Test@123#$%");
        assert(mock_messagebox_called);
        assert(mock_messagebox_text == "Test@123#$%");
        cout << "✓ PWN command with special chars test passed" << endl;
    }
    
    // Test unknown command (should do nothing)
    {
        execute_command_test("unknown_command");
        assert(!mock_sleep_called);
        assert(!mock_exit_called);
        assert(!mock_messagebox_called);
        cout << "✓ Unknown command test passed" << endl;
    }
    
    // Test empty command
    {
        execute_command_test("");
        assert(!mock_sleep_called);
        assert(!mock_exit_called);
        assert(!mock_messagebox_called);
        cout << "✓ Empty command test passed" << endl;
    }
    
    cout << "All command tests passed!" << endl;
    return 0;
}
