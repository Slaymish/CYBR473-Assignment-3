#include <iostream>
#include <cassert>
#include <string>
#include <algorithm>

using namespace std;

// Test string manipulation functions
string trim_whitespace(const string& str) {
    size_t start = str.find_first_not_of(" \t\r\n");
    if (start == string::npos) return "";
    size_t end = str.find_last_not_of(" \t\r\n");
    return str.substr(start, end - start + 1);
}

bool starts_with(const string& str, const string& prefix) {
    return str.length() >= prefix.length() && 
           str.substr(0, prefix.length()) == prefix;
}

string to_hex_string(const unsigned char* data, size_t length) {
    string result;
    for (size_t i = 0; i < length; i++) {
        char hex[3];
        sprintf(hex, "%02x", data[i]);
        result += hex;
    }
    return result;
}

int main() {
    cout << "Running string operation tests..." << endl;
    
    // Test whitespace trimming
    {
        assert(trim_whitespace("  hello  ") == "hello");
        assert(trim_whitespace("\t\ntest\r\n") == "test");
        assert(trim_whitespace("") == "");
        assert(trim_whitespace("   ") == "");
        assert(trim_whitespace("no_spaces") == "no_spaces");
        cout << "✓ Whitespace trimming test passed" << endl;
    }
    
    // Test starts_with
    {
        assert(starts_with("hello world", "hello"));
        assert(starts_with("test", "test"));
        assert(!starts_with("hello", "world"));
        assert(!starts_with("hi", "hello"));
        assert(starts_with("", ""));
        cout << "✓ Starts with test passed" << endl;
    }
    
    // Test hex string conversion
    {
        unsigned char data[] = {0x01, 0x23, 0xAB, 0xFF};
        string hex = to_hex_string(data, 4);
        assert(hex == "0123abff");
        cout << "✓ Hex string conversion test passed" << endl;
    }
    
    // Test command parsing scenarios
    {
        string cmd1 = "slp 10";
        assert(starts_with(cmd1, "slp "));
        string duration = cmd1.substr(4);
        assert(duration == "10");
        
        string cmd2 = "pwn Hello!";
        assert(starts_with(cmd2, "pwn "));
        string message = cmd2.substr(4);
        assert(message == "Hello!");
        
        cout << "✓ Command parsing test passed" << endl;
    }
    
    cout << "All string operation tests passed!" << endl;
    return 0;
}
