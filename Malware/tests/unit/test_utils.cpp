#include <iostream>
#include <cassert>
#include <string>
#include <sstream>

using namespace std;

// Mock key codes (simplified version of Windows VK codes)
#define MOCK_VK_SPACE 32
#define MOCK_VK_RETURN 13
#define MOCK_VK_BACK 8
#define MOCK_VK_A 65
#define MOCK_VK_Z 90
#define MOCK_VK_0 48
#define MOCK_VK_9 57

// Simplified version of get_key_name for testing
string get_key_name_test(int vk_code) {
    switch(vk_code) {
        case MOCK_VK_SPACE: return " ";
        case MOCK_VK_RETURN: return "[ENTER]";
        case MOCK_VK_BACK: return "[BACKSPACE]";
        default:
            if (vk_code >= MOCK_VK_A && vk_code <= MOCK_VK_Z) {
                return string(1, (char)vk_code);
            }
            if (vk_code >= MOCK_VK_0 && vk_code <= MOCK_VK_9) {
                return string(1, (char)vk_code);
            }
            return "[UNKNOWN]";
    }
}

// Test client ID generation (simplified)
string generate_test_client_id(const string& mock_guid) {
    if (mock_guid.empty()) {
        return "unknown";
    }
    return mock_guid;
}

// Test URL building
string build_c2_url(const string& server, const string& client_id) {
    return server + "/command?client_id=" + client_id;
}

int main() {
    cout << "Running utility tests..." << endl;
    
    // Test key name generation
    {
        assert(get_key_name_test(MOCK_VK_SPACE) == " ");
        assert(get_key_name_test(MOCK_VK_RETURN) == "[ENTER]");
        assert(get_key_name_test(MOCK_VK_BACK) == "[BACKSPACE]");
        assert(get_key_name_test(MOCK_VK_A) == "A");
        assert(get_key_name_test(MOCK_VK_Z) == "Z");
        assert(get_key_name_test(MOCK_VK_0) == "0");
        assert(get_key_name_test(MOCK_VK_9) == "9");
        assert(get_key_name_test(999) == "[UNKNOWN]");
        cout << "✓ Key name generation test passed" << endl;
    }
    
    // Test client ID generation
    {
        assert(generate_test_client_id("test-guid-123") == "test-guid-123");
        assert(generate_test_client_id("") == "unknown");
        cout << "✓ Client ID generation test passed" << endl;
    }
    
    // Test URL building
    {
        string url = build_c2_url("http://example.com", "client123");
        assert(url == "http://example.com/command?client_id=client123");
        cout << "✓ URL building test passed" << endl;
    }
    
    // Test URL building with special characters
    {
        string url = build_c2_url("https://test.server.com", "client_456_test");
        assert(url == "https://test.server.com/command?client_id=client_456_test");
        cout << "✓ URL building with special chars test passed" << endl;
    }
    
    cout << "All utility tests passed!" << endl;
    return 0;
}
